import "../stdlib/List" as List
import "../types" as Aliases exposing ( TypeAlias, Property )
import "../types" as Blocks exposing ( Function, FunctionArg, FunctionArgsUnion, Const, ImportModule, Import, Export, Module )
import "../types" as Boolean exposing ( Equality, InEquality, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual, And, Or, ListPrepend )
import "../types" as Control exposing ( IfStatement, ListDestructurePart, BranchPattern, Branch, CaseStatement )
import "../types" as Functions exposing ( FunctionCall, Lambda, LambdaCall )
import "../types" as Objects exposing ( ObjectLiteral, Field, ModuleReference )
import "../types" as Operators exposing ( Addition, Subtraction, Multiplication, Division, Mod, LeftPipe, RightPipe )
import "../types" as Values exposing ( Value, StringValue, FormatStringValue, ListValue, ListRange )
import "../types" exposing ( Tag, UnionType, UnionUntaggedType, Type, TagArg, Block, Constructor, Expression )
import "./Common" exposing ( prefixLines )

exposing ( generateEnglish )

generateTag: Tag -> string
generateTag tag =
    let
        generateTypeArg: TagArg -> string
        generateTypeArg arg =
            generateType arg.type
                |> (\type_ -> arg.name + ": " + type_ + "")

        typeDefArgs: string
        typeDefArgs =
            List.map generateTypeArg tag.args
                |> (\y -> y.join ",\n    ")

        funcDefArgsStr: string
        funcDefArgsStr =
            if tag.args.length > 0 then
                `{ ${typeDefArgs} }`
            else
                ""
    in
        generateType {
            kind: "FixedType",
            name: tag.name,
            args: [ ]
        }
            |> (\y -> y + funcDefArgsStr)

generateUnionType: UnionType -> string
generateUnionType syntax =
    let
        tags: string
        tags =
            List.map generateTag syntax.tags
                |> (\y -> y.join "\n| ")

        prefixed: string
        prefixed =
            prefixLines tags 4
    in
        `type ${generateType(syntax.type)} =\n${tags}`

generateUnionUntaggedType: UnionUntaggedType -> string
generateUnionUntaggedType syntax =
    let
        values: string
        values =
            List.map generateStringValue syntax.values
                |> (\y -> y.join "\n| ")

        prefixed: string
        prefixed =
            prefixLines values 4
    in
        `type ${generateType(syntax.type)} =\n${prefixed}`

generateProperty: Property -> string
generateProperty syntax =
    `${syntax.name}: ${generateType(syntax.type)}`

generateTypeAlias: TypeAlias -> string
generateTypeAlias syntax =
    let
        properties: string
        properties =
            List.map generateProperty syntax.properties
                |> (\y -> y.join ",\n    ")

        typeDef: string
        typeDef =
            generateType syntax.type
    in
        `type alias ${typeDef} = {\n    ${properties}\n}`

generateListType: List Type -> string
generateListType args =
    if args.length > 0 && args[0].kind == "GenericType" then
        `List ${generateType(args[0])}`
    else
        let
            fixedArgs: List Type
            fixedArgs =
                List.filter (\type_ -> type_.kind == "FixedType") args
        in
            case fixedArgs of
                [] ->
                    "List any"

                x :: [] ->
                    if x.kind == "FixedType" && x.args.length > 0 then
                        `List (${generateType(x)})`
                    else
                        `List ${generateType(x)}`

                default ->
                    `List (${fixedArgs.map(generateType).join(" | ")})`

generateTopLevelType: Type -> string
generateTopLevelType type_ =
    case type_ of
        GenericType ->
            generateType type_

        FixedType { name, args } ->
            if name == "List" then
                generateType type_
            else
                let
                    genericArgs: List Type
                    genericArgs =
                        List.filter (\type_ -> type_.kind == "GenericType" || type_.kind == "FixedType") args
                in
                    if genericArgs.length == 0 then
                        name
                    else
                        `${name} ${genericArgs.map(generateType).join(" ")}`

        FunctionType ->
            generateType type_

        ObjectLiteralType ->
            ``

generateType: Type -> string
generateType type_ =
    case type_ of
        GenericType { name } ->
            name

        FixedType { name, args } ->
            if name == "List" then
                generateListType args
            else
                let
                    genericArgs: List Type
                    genericArgs =
                        List.filter (\type_ -> type_.kind == "GenericType") args
                in
                    if genericArgs.length == 0 then
                        name
                    else
                        `${name} ${genericArgs.map(generateType).join(" ")}`

        FunctionType { args } ->
            `(${args.map(generateType).join(" -> ")})`

        ObjectLiteralType ->
            ``

generateField: Field -> string
generateField field =
    let
        value: string
        value =
            generateExpression field.value
    in
        `${field.name}: ${value}`

generateObjectLiteral: ObjectLiteral -> string
generateObjectLiteral literal =
    let
        fields: string
        fields =
            literal.fields.map generateField
                |> (\y -> y.join ",\n    ")
    in
        if literal.base == null then
            if literal.fields.length == 1 then
                `{ ${fields} }`
            else
                `{\n   ${fields}\n}`
        else
            if literal.fields.length == 1 then
                `{ ${literal.base.body}, ${fields} }`
            else
                `{\n    ${literal.base.body},\n    ${fields}\n}`

generateValue: Value -> string
generateValue value =
    value.body

generateStringValue: StringValue -> string
generateStringValue string =
    `"${string.body}"`

generateFormatStringValue: FormatStringValue -> string
generateFormatStringValue string =
    "`" + string.body + "`"

generateListValue: ListValue -> string
generateListValue list =
    case list.items of
        [] ->
            "An empty list"

        x :: [] ->
            `A list containing ${generateExpression(x)} only`

        default ->
            `A list containing:\n${prefixLines(list.items.map(generateExpression).join(",\n"), 4)}`

generateListRange: ListRange -> string
generateListRange list =
    `[ ${list.start.body}..${list.end.body} ]`

generateLetBlock: List Block -> string
generateLetBlock body =
    case body of
        [] ->
            ""

        x :: ys ->
            let
                prefixedLet: string
                prefixedLet =
                    prefixLines "\nlet" 4

                prefixedBody: string
                prefixedBody =
                    List.map generateBlock body
                        |> (\y -> y.join "\n\n")

                prefixedLines: string
                prefixedLines =
                    prefixLines prefixedBody 8

                prefixedIn: string
                prefixedIn =
                    prefixLines "\nin" 4
            in
                `${prefixedLet}\n${prefixedLines}${prefixedIn}${prefixLines("", 8)}`

        default ->
            ""

generateIfStatement: IfStatement -> string
generateIfStatement ifStatement =
    let
        maybeIfLetBody: string
        maybeIfLetBody =
            generateLetBlock ifStatement.ifLetBody

        maybeElseLetBody: string
        maybeElseLetBody =
            generateLetBlock ifStatement.elseLetBody

        predicate: string
        predicate =
            generateExpression ifStatement.predicate

        ifIndent: number
        ifIndent =
            if maybeIfLetBody == "" then
                4
            else
                8

        ifBody: string
        ifBody =
            generateExpression ifStatement.ifBody
                |> (\lines -> prefixLines lines ifIndent)

        elseIndent: number
        elseIndent =
            if maybeElseLetBody == "" then
                4
            else
                8

        elseBody: string
        elseBody =
            generateExpression ifStatement.elseBody
                |> (\lines -> prefixLines lines elseIndent)
    in
        `if ${predicate} then${maybeIfLetBody}\n${ifBody}\nelse${maybeElseLetBody}\n${elseBody}\n`

generateConstructor: Constructor -> string
generateConstructor constructor =
    case constructor.pattern.fields of
        [] ->
            constructor.constructor

        default ->
            `${constructor.constructor} ${generateObjectLiteral(constructor.pattern)}`

generateListDestructurePart: ListDestructurePart -> string
generateListDestructurePart part =
    case part of
        EmptyList ->
            "An empty list"

        StringValue { body } ->
            `"${body}"`

        FormatStringValue { body } ->
            "`" + body + "`"

        Value { body } ->
            body

        Destructure { pattern } ->
            if pattern.length == 0 then
                part.constructor
            else
                `${part.constructor} ${pattern}`

generateBranchPattern: BranchPattern -> string
generateBranchPattern branchPattern =
    case branchPattern of
        Destructure { pattern } ->
            if pattern.length == 0 then
                branchPattern.constructor
            else
                `${branchPattern.constructor} ${pattern}`

        StringValue { body } ->
            `"${body}"`

        FormatStringValue { body } ->
            "`" + body + "`"

        EmptyList ->
            "An empty list"

        ListDestructure { parts } ->
            List.map generateListDestructurePart parts
                |> (\y -> y.join " is in a list element from ")

        Default ->
            "Nothing else matches"

generateBranch: Branch -> string
generateBranch branch =
    let
        maybeLetBody: string
        maybeLetBody =
            generateLetBlock branch.letBody

        bodyIndent: number
        bodyIndent =
            if maybeLetBody == "" then
                4
            else
                9

        body: string
        body =
            generateExpression branch.body
                |> (\y -> prefixLines `return ${y}` bodyIndent)

        pattern: string
        pattern =
            generateBranchPattern branch.pattern
    in
        `Is it ${pattern}? ->${maybeLetBody}\n${body}`

generateCaseStatement: CaseStatement -> string
generateCaseStatement caseStatement =
    let
        predicate: string
        predicate =
            generateExpression caseStatement.predicate

        branches: string
        branches =
            List.map generateBranch caseStatement.branches
                |> (\y -> y.join "\n\n")
                |> (\y -> prefixLines y 4)
    in
        `Check the value of ${predicate}\n${branches}`

generateAddition: Addition -> string
generateAddition addition =
    let
        left: string
        left =
            generateExpression addition.left

        right: string
        right =
            generateExpression addition.right
    in
        `${left} plus ${right}`

generateSubtraction: Subtraction -> string
generateSubtraction subtraction =
    let
        left: string
        left =
            generateExpression subtraction.left

        right: string
        right =
            generateExpression subtraction.right
    in
        `${left} subtracts ${right}`

generateMultiplication: Multiplication -> string
generateMultiplication multiplication =
    let
        left: string
        left =
            generateExpression multiplication.left

        right: string
        right =
            generateExpression multiplication.right
    in
        `${left} multiplied by ${right}`

generateDivision: Division -> string
generateDivision division =
    let
        left: string
        left =
            generateExpression division.left

        right: string
        right =
            generateExpression division.right
    in
        `${left} divided by ${right}`

generateMod: Mod -> string
generateMod mod =
    let
        left: string
        left =
            generateExpression mod.left

        right: string
        right =
            generateExpression mod.right
    in
        `${left} mod ${right}`

generateLeftPipe: LeftPipe -> string
generateLeftPipe leftPipe =
    let
        left: string
        left =
            generateExpression leftPipe.left

        right: string
        right =
            generateExpression leftPipe.right
    in
        `Send ${left} as the last argument to ${right}`

generateRightPipe: RightPipe -> string
generateRightPipe rightPipe =
    let
        left: string
        left =
            generateExpression rightPipe.left

        right: string
        right =
            generateExpression rightPipe.right
    in
        `Send ${right} as the last argument to ${left}`

generateModuleReference: ModuleReference -> string
generateModuleReference moduleReference =
    let
        left: string
        left =
            moduleReference.path.join "."

        right: string
        right =
            generateExpression moduleReference.value
    in
        `${left}.${right}`

generateFunctionCallArg: Expression -> string
generateFunctionCallArg arg =
    case arg of
        Constructor ->
            `(${generateExpression(arg)})`

        FunctionCall ->
            `(${generateExpression(arg)})`

        ModuleReference { value } ->
            case value of
                Constructor ->
                    `(${generateExpression(arg)})`

                FunctionCall ->
                    `(${generateExpression(arg)})`

                default ->
                    generateExpression arg

        ListPrepend ->
            `(${generateExpression(arg)})`

        default ->
            generateExpression arg

generateFunctionCall: FunctionCall -> string
generateFunctionCall functionCall =
    if functionCall.args.length == 0 then
        `${functionCall.name}()`
    else
        let
            args: string
            args =
                List.map generateFunctionCallArg functionCall.args
                    |> (\y -> y.join " ")
        in
            `${functionCall.name} ${args}`

generateLambda: Lambda -> string
generateLambda lambda =
    let
        args: string
        args =
            List.map (\arg -> arg) lambda.args
                |> (\y -> y.join " ")

        body: string
        body =
            generateExpression lambda.body
    in
        `(\\${args} -> ${body})`

generateLambdaCall: LambdaCall -> string
generateLambdaCall lambdaCall =
    let
        args: string
        args =
            List.map (\arg -> `${arg}: any`) lambdaCall.args
                |> (\y -> y.join ", ")

        argsValues: string
        argsValues =
            List.map generateExpression lambdaCall.args
                |> (\y -> y.join ", ")

        body: string
        body =
            generateExpression lambdaCall.lambda.body
    in
        `(function(${args}) {\n    return ${body};\n})(${argsValues})`

generateEquality: Equality -> string
generateEquality equality =
    let
        left: string
        left =
            generateExpression equality.left

        right: string
        right =
            generateExpression equality.right
    in
        `${left} is equal to ${right}`

generateInEquality: InEquality -> string
generateInEquality inEquality =
    let
        left: string
        left =
            generateExpression inEquality.left

        right: string
        right =
            generateExpression inEquality.right
    in
        `${left} is not equal to ${right}`

generateLessThan: LessThan -> string
generateLessThan lessThan =
    let
        left: string
        left =
            generateExpression lessThan.left

        right: string
        right =
            generateExpression lessThan.right
    in
        `${left} is less than ${right}`

generateLessThanOrEqual: LessThanOrEqual -> string
generateLessThanOrEqual lessThanOrEqual =
    let
        left: string
        left =
            generateExpression lessThanOrEqual.left

        right: string
        right =
            generateExpression lessThanOrEqual.right
    in
        `${left} is less than or equal to ${right}`

generateGreaterThan: GreaterThan -> string
generateGreaterThan greaterThan =
    let
        left: string
        left =
            generateExpression greaterThan.left

        right: string
        right =
            generateExpression greaterThan.right
    in
        `${left} is greater than ${right}`

generateGreaterThanOrEqual: GreaterThanOrEqual -> string
generateGreaterThanOrEqual greaterThanOrEqual =
    let
        left: string
        left =
            generateExpression greaterThanOrEqual.left

        right: string
        right =
            generateExpression greaterThanOrEqual.right
    in
        `${left} is greater than or equal to ${right}`

generateAnd: And -> string
generateAnd and =
    let
        left: string
        left =
            generateExpression and.left

        right: string
        right =
            generateExpression and.right
    in
        `${left} and ${right}`

generateOr: Or -> string
generateOr or =
    let
        left: string
        left =
            generateExpression or.left

        right: string
        right =
            generateExpression or.right
    in
        `${left} or ${right}`

generateListPrepend: ListPrepend -> string
generateListPrepend prepend =
    let
        left: string
        left =
            generateExpression prepend.left

        right: string
        right =
            generateExpression prepend.right
    in
        `Add ${left} as a list item to the front of ${right}`

generateExpression: Expression -> string
generateExpression expression =
    case expression of
        Value ->
            generateValue expression

        StringValue ->
            generateStringValue expression

        FormatStringValue ->
            generateFormatStringValue expression

        ListValue ->
            generateListValue expression

        ListRange ->
            generateListRange expression

        ObjectLiteral ->
            generateObjectLiteral expression

        IfStatement ->
            generateIfStatement expression

        CaseStatement ->
            generateCaseStatement expression

        Addition ->
            generateAddition expression

        Subtraction ->
            generateSubtraction expression

        Multiplication ->
            generateMultiplication expression

        Division ->
            generateDivision expression

        Mod ->
            generateMod expression

        And ->
            generateAnd expression

        Or ->
            generateOr expression

        ListPrepend ->
            generateListPrepend expression

        LeftPipe ->
            generateLeftPipe expression

        RightPipe ->
            generateRightPipe expression

        ModuleReference ->
            generateModuleReference expression

        FunctionCall ->
            generateFunctionCall expression

        Lambda ->
            generateLambda expression

        LambdaCall ->
            generateLambdaCall expression

        Constructor ->
            generateConstructor expression

        Equality ->
            generateEquality expression

        InEquality ->
            generateInEquality expression

        LessThan ->
            generateLessThan expression

        LessThanOrEqual ->
            generateLessThanOrEqual expression

        GreaterThan ->
            generateGreaterThan expression

        GreaterThanOrEqual ->
            generateGreaterThanOrEqual expression

generateFunctionArg: FunctionArgsUnion -> string
generateFunctionArg arg =
    case arg of
        FunctionArg { name, type } ->
            `${name} with the type ${generateType(type)}`

        AnonFunctionArg { index, type } ->
            `_${index} with the type ${generateType(type)}`

generateFunction: Function -> string
generateFunction function_ =
    let
        args: string
        args =
            List.map generateFunctionArg function_.args
                |> (\y -> y.join "\n")

        maybeLetBody: string
        maybeLetBody =
            generateLetBlock function_.letBody

        returnType: string
        returnType =
            generateTopLevelType function_.returnType

        bodyIndent: number
        bodyIndent =
            if maybeLetBody == "" then
                4
            else
                8

        body: string
        body =
            generateExpression function_.body
                |> (\y -> prefixLines y bodyIndent)
    in
        [
            `${function_.name} is a function with the arguments:`,
            prefixLines args 4,
            `${function_.name} returns a value of the type ${returnType}`,
            `${function_.name} is defined as: ${maybeLetBody}`,
            `${body}`
        ]
            |> (\y -> y.join "\n")

generateConst: Const -> string
generateConst constDef =
    let
        body: string
        body =
            generateExpression constDef.value
                |> (\y -> prefixLines y 4)

        typeDef: string
        typeDef =
            generateTopLevelType constDef.type
    in
        [
            `${constDef.name} is a constant with the type ${typeDef}`,
            `${constDef.name} is assigned to:`,
            `${body}`
        ]
            |> (\y -> y.join "\n")

generateImportModule: ImportModule -> string
generateImportModule module =
    let
        partExposing: string
        partExposing =
            if module.exposing.length == 0 then
                ""
            else
                ` exposing (${module.exposing.join(", ")} )`
    in
        case module.alias of
            Just { value } ->
                `import ${module.name} as ${value}${partExposing}`

            Nothing ->
                `import ${module.name}${partExposing}`

generateImportBlock: Import -> string
generateImportBlock imports =
    List.map generateImportModule imports.modules
        |> (\y -> y.join "\n")

generateExportBlock: Export -> string
generateExportBlock exports =
    `exposing (${exports.names.join(", ")})`

generateBlock: Block -> string
generateBlock syntax =
    case syntax of
        Import ->
            generateImportBlock syntax

        Export ->
            generateExportBlock syntax

        UnionType ->
            generateUnionType syntax

        UnionUntaggedType ->
            generateUnionUntaggedType syntax

        TypeAlias ->
            generateTypeAlias syntax

        Typeclass ->
            ""

        Impl ->
            ""

        Function ->
            generateFunction syntax

        Const ->
            generateConst syntax

        Comment ->
            ""

        MultilineComment ->
            ""

generateEnglish: Module -> string
generateEnglish module =
    List.map generateBlock module.body
        |> List.filter (\line -> line.length > 0)
        |> (\y -> y.join "\n\n")
